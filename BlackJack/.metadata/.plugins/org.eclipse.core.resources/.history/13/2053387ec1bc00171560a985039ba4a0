package fr.univ.artois;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * Fenêtre principale où se trouveront les panels de connexion et de lobby d'attente
 * @author Browarr
 *
 */
public class FenetrePrincipale extends JFrame{
	
	private JPanel conteneurPrincipal = new JPanel(new CardLayout());
	private FenetreDeLobby fenetreDeLobby = new FenetreDeLobby();
	private FenetreDeConnexion fenetreDeConnexion = new FenetreDeConnexion();
	private FenetreAttenteDeLancementDePartie fenetreAttenteDeLancementDePartie = new FenetreAttenteDeLancementDePartie();
	
	private final String FENETREDELOBBY = new String("FENETREDELOBBY");
	private final String FENETREDECONNEXION = new String("FENETREDECONNEXION");
	private final String FENETREATTENTEDELANCEMENTDEPARTIE = new String("FENETREATTENTEDELANCEMENTDEPARTIE");
	
	
	public FenetrePrincipale(){
		this.setTitle("BlackJack");
		this.setSize(900, 700);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ajoutEcouteurBoutonValidation();
		remplissageConteneurPrincipal();
		this.setContentPane(this.conteneurPrincipal);
		this.setVisible(true);
	}
	
	/**
	 * On remplit le conteneur principal avec les autres panels
	 */
	public void remplissageConteneurPrincipal(){
		
		this.conteneurPrincipal.add(fenetreDeLobby, FENETREDELOBBY);
		this.conteneurPrincipal.add(fenetreDeConnexion, FENETREDECONNEXION);
		this.conteneurPrincipal.add(fenetreAttenteDeLancementDePartie, FENETREATTENTEDELANCEMENTDEPARTIE);
		
		CardLayout cl = (CardLayout)this.conteneurPrincipal.getLayout();
		cl.show(this.conteneurPrincipal, FENETREDECONNEXION);
		
	}
	
	/**
	 * Lors d'une pression sur le bouton de connexion,
	 * on récupére les informations enregistrées dans les champs de texte,
	 * on essaie de se connecter au serveur via l'adresse et le port indiqués par l'utilisateur
	 */
	public void ajoutEcouteurBoutonValidation(){
		
		this.fenetreDeConnexion.getBoutonValidation().addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				String osef = fenetreDeConnexion.getAdresseServeur().getAdresseServeur();
				System.out.println("Valeur de osef: "+osef);
				recuperationDonnees();
			}
		});
	}
	
	public void recuperationDonnees(){
		String adresse = new String();
		String port = String Integer(-1);
		
		adresse = this.fenetreDeConnexion.getAdresseServeur().getAdresseServeur();
		port = this.fenetreDeConnexion.getPortServeur().getPort();
		
		System.out.println("Adresse: "+adresse);
		System.out.println("Port: "+port);
		
	}

	/*
	 * Getters && setters
	 */
	public JPanel getConteneurPrincipal() {
		return conteneurPrincipal;
	}

	public void setConteneurPrincipal(JPanel conteneurPrincipal) {
		this.conteneurPrincipal = conteneurPrincipal;
	}

	public FenetreDeLobby getFenetreDeLobby() {
		return fenetreDeLobby;
	}

	public void setFenetreDeLobby(FenetreDeLobby fenetreDeLobby) {
		this.fenetreDeLobby = fenetreDeLobby;
	}

	public FenetreDeConnexion getFenetreDeConnexion() {
		return fenetreDeConnexion;
	}

	public void setFenetreDeConnexion(FenetreDeConnexion fenetreDeConnexion) {
		this.fenetreDeConnexion = fenetreDeConnexion;
	}

	public FenetreAttenteDeLancementDePartie getFenetreAttenteDeLancementDePartie() {
		return fenetreAttenteDeLancementDePartie;
	}

	public void setFenetreAttenteDeLancementDePartie(FenetreAttenteDeLancementDePartie fenetreAttenteDeLancementDePartie) {
		this.fenetreAttenteDeLancementDePartie = fenetreAttenteDeLancementDePartie;
	}

	public String getFENETREDELOBBY() {
		return FENETREDELOBBY;
	}

	public String getFENETREDECONNEXION() {
		return FENETREDECONNEXION;
	}

	public String getFENETREATTENTEDELANCEMENTDEPARTIE() {
		return FENETREATTENTEDELANCEMENTDEPARTIE;
	}
	
}
